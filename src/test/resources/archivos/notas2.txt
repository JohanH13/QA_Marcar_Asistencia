En un proyecto de automatizaciÃ³n con Selenium y Screenplay, lo ideal es que la mayor parte del cÃ³digo (como tasks, interactions, questions y userinterfaces) estÃ© dentro de test/java en lugar de main/java.

Â¿Por quÃ©?
CÃ³digo de automatizaciÃ³n â‰  CÃ³digo de producciÃ³n:

src/main/java suele usarse para cÃ³digo de la aplicaciÃ³n en sÃ­ (si fuera un sistema en desarrollo).
src/test/java se usa para cÃ³digo de pruebas, como es tu caso.
SeparaciÃ³n de responsabilidades:

Si tu cÃ³digo de automatizaciÃ³n estÃ¡ en main/java, Maven o cualquier herramienta de construcciÃ³n podrÃ­a incluirlo en la compilaciÃ³n del proyecto como si fuera cÃ³digo de producciÃ³n.
ManteniÃ©ndolo en test/java, se ejecutarÃ¡ solo en contexto de pruebas.

Â¿CÃ³mo reorganizarlo?
Mueve las carpetas questions, task.SIGED y userinterfaces a test/java.
La estructura correcta quedarÃ­a asÃ­:

test
â”œâ”€â”€ java
â”‚   â”œâ”€â”€ questions
â”‚   â”œâ”€â”€ tasks
â”‚   â”œâ”€â”€ userinterfaces
â”‚   â”‚   â”œâ”€â”€ SIGED
â”‚   â”‚   â”œâ”€â”€ SPJC
â”‚   â”‚   â”œâ”€â”€ SYM
â”‚   â”œâ”€â”€ runner
â”‚   â”œâ”€â”€ stepdefinitions
â”‚   â”œâ”€â”€ Complements (o utils/helpers)
â”œâ”€â”€ resources
â”‚   â”œâ”€â”€ archivos
â”‚   â”œâ”€â”€ features

ExcepciÃ³n: Â¿CuÃ¡ndo usar main/java?
Si tienes una librerÃ­a comÃºn que se usa tanto en pruebas como en desarrollo, podrÃ­as ubicarla en main/java. Pero en tu caso, dado que es solo automatizaciÃ³n de pruebas, todo debe ir en test/java.

ğŸ”¹ ConclusiÃ³n: SÃ­, lo mejor es usar test/java y no main/java. Mueve las carpetas y estarÃ¡s alineado con las mejores prÃ¡cticas.


