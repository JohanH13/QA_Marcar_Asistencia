ğŸ“Œ Diferencia entre Dependencias y Plugins en Maven
ğŸ”¹ Concepto
Â¿QuÃ© es?
ğŸ”¹ Dependencias (<dependency>)
LibrerÃ­as externas necesarias en tiempo de ejecuciÃ³n o compilaciÃ³n.
ğŸ”¹Plugins (<plugin>)
Herramientas que amplÃ­an las funcionalidades de Maven.

Â¿DÃ³nde se usan?
ğŸ”¹ Dependencias (<dependency>)
En <dependencies> dentro del pom.xml.
ğŸ”¹Plugins (<plugin>)
En <build><plugins> dentro del pom.xml.

Â¿Para quÃ© sirve?
ğŸ”¹ Dependencias (<dependency>)
Proveer clases y funcionalidades a la aplicaciÃ³n.
ğŸ”¹Plugins (<plugin>)
Ejecutar tareas especÃ­ficas como compilaciÃ³n, pruebas, empaquetado y despliegue.

Ejemplo de uso
ğŸ”¹ Dependencias (<dependency>)
JUnit, Selenium, Spring Boot, Cucumber.
ğŸ”¹Plugins (<plugin>)
Maven Compiler Plugin, Surefire Plugin, Shade Plugin.

Â¿CuÃ¡ndo se ejecutan?
ğŸ”¹ Dependencias (<dependency>)
Durante la ejecuciÃ³n o compilaciÃ³n del cÃ³digo.
ğŸ”¹Plugins (<plugin>)
Solo cuando se ejecutan comandos Maven especÃ­ficos.

ğŸ“Œ Resumen Final
ğŸ“Œ Dependencias: Son bibliotecas externas necesarias para el cÃ³digo.
ğŸ“Œ Plugins: Son herramientas que extienden Maven para realizar tareas especÃ­ficas.
ğŸš€ Ambos son esenciales en un proyecto Maven, pero tienen propÃ³sitos diferentes.


ğŸ“Œ Ejemplos en pom.xml
âœ… Ejemplo de una Dependencia (serenity-core)
Esta dependencia proporciona clases y funcionalidades para usar en el cÃ³digo:

<dependencies>
    <dependency>
        <groupId>net.serenity-bdd</groupId>
        <artifactId>serenity-core</artifactId>
        <version>${serenity-version}</version>
    </dependency>
</dependencies>

âœ… Ejemplo de un Plugin (maven-compiler-plugin)
Este plugin configura la versiÃ³n de Java usada para compilar:

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>17</source>   <!-- VersiÃ³n de Java fuente -->
                <target>17</target>   <!-- VersiÃ³n de Java destino -->
            </configuration>
        </plugin>
    </plugins>
</build>